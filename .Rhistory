if(any(is.na(output_list$r_0)) |
any(is.na(output_list$r_eff)) |
any(is.nan(output_list$model_deaths4total))
){
rerun_new_sample <- TRUE
samples_to_take[i] <- samples_to_take[i] +1
print("about to jump")
break}
rerun_new_sample <- FALSE
# store the death output with the output from other samples
temp_ll_values <- data.frame(transmission_fit$value, sample_num, interaction_param)
ll_values <- rbind(ll_values, temp_ll_values)
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
print(sig)
}
if(rerun_new_sample == F){
i <- i + 1
}
print(i)
}
################################################################################
# Coronavirus cross-protection
# Author: Naomi R Waterlow
# Date: 2021-04-08
################################################################################
set.seed(19930623)
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
transmission <- data.table()
introductions <- data.table()
ll_values <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
n_samples <- 20
samples_to_take <- sample(x=1:dim(trace_to_sample)[1],size=n_samples,replace = T)
i <- 1
while(i <= n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.01,0.1),
upper = c(0.6,10),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
if(any(is.na(output_list$r_0)) |
any(is.na(output_list$r_eff)) |
any(is.nan(output_list$model_deaths4total))
){
rerun_new_sample <- TRUE
samples_to_take[i] <- samples_to_take[i] +1
print("about to jump")
break}
rerun_new_sample <- FALSE
# store the death output with the output from other samples
temp_ll_values <- data.frame(transmission_fit$value, sample_num, interaction_param)
ll_values <- rbind(ll_values, temp_ll_values)
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
print(sig)
}
if(rerun_new_sample == F){
i <- i + 1
}
print(i)
}
#colours for all
cc <- scales::seq_gradient_pal("darkmagenta",  "darkorange", "Lab")(seq(0,1,length.out=6))
# create the fit plot
model_deaths$sample <- factor(model_deaths$sample)
model_deaths$interaction <- factor(model_deaths$interaction)
model_deaths$interaction <- plyr::revalue(model_deaths$interaction, c("0" = "Cross-protection: 0",
"0.2" = "Cross-protection: 0.2",
"0.4" = "Cross-protection: 0.4",
"0.6" = "Cross-protection: 0.6",
"0.8" = "Cross-protection: 0.8",
"1" = "Cross-protection: 1"))
FIT_PLOT <- ggplot() +
geom_point(data=model_deaths, aes(x = date, y = total, colour = interaction )) +
facet_wrap(interaction~., ncol=1)+
scale_colour_manual(values=cc) +
geom_point(data = deaths_covid, aes(x = date, y = actual_deaths), size = 1) +
geom_vline(xintercept = covid_date, colour = "red" ) +
labs(x = "Date", title = "", y = "Number of deaths", colour = "strength of protection") +
lims(x = c(as.Date("2020-02-01"), as.Date("2020-05-31")))  +
theme_linedraw() +
theme(strip.text.y = element_text(angle = 0),
strip.background = element_rect(colour="white", fill="white"),
strip.text = element_text(colour = 'black',hjust = 0))
FIT_PLOT
View(model_deaths)
which.max(model_deaths$total)
model_deaths[7258,]
samples_to_take
sample_num <- 13039
seasonal_sample <- trace_to_sample[sample_num,]
seasonal_sample
View(trace_to_sample)
View(introductions)
max(introductions$intro_val)
which.max(introductions$intro_val)
View(transmission)
which.max(transmission$transmission_val)
##### SETUP #######
run_start_2 <- as.Date("2020-01-01") # When to start the smulation
run_end <- as.Date("2020-06-01") # When to end teh simulation
length_to_run_2 <- (run_end - run_start_2)[[1]] #total days to run
mobility_date <- "2020-02-21" # date teh google mobility data starts
covid_date <- as.Date("2020-02-10") # date that covid is first introduced
covid_change_time <- as.Date("2020-03-23") #date of lockdown (i.e. schools closing)
serology_time <- as.Date("2020-05-31") # time point of seology.
################################################################################
# Coronavirus cross-protection
# Author: Naomi R Waterlow
# Date: 2021-04-08
################################################################################
set.seed(19930623)
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
transmission <- data.table()
introductions <- data.table()
ll_values <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
n_samples <- 20
samples_to_take <- sample(x=1:dim(trace_to_sample)[1],size=n_samples,replace = T)
i <- 1
while(i <= n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.001,0.1),
upper = c(0.6,10),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
if(any(is.na(output_list$r_0)) |
any(is.na(output_list$r_eff)) |
any(is.nan(output_list$model_deaths4total))
){
rerun_new_sample <- TRUE
samples_to_take[i] <- samples_to_take[i] +1
print("about to jump")
break}
rerun_new_sample <- FALSE
# store the death output with the output from other samples
temp_ll_values <- data.frame(transmission_fit$value, sample_num, interaction_param)
ll_values <- rbind(ll_values, temp_ll_values)
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
print(sig)
}
if(rerun_new_sample == F){
i <- i + 1
}
print(i)
}
#colours for all
cc <- scales::seq_gradient_pal("darkmagenta",  "darkorange", "Lab")(seq(0,1,length.out=6))
# create the fit plot
model_deaths$sample <- factor(model_deaths$sample)
model_deaths$interaction <- factor(model_deaths$interaction)
model_deaths$interaction <- plyr::revalue(model_deaths$interaction, c("0" = "Cross-protection: 0",
"0.2" = "Cross-protection: 0.2",
"0.4" = "Cross-protection: 0.4",
"0.6" = "Cross-protection: 0.6",
"0.8" = "Cross-protection: 0.8",
"1" = "Cross-protection: 1"))
FIT_PLOT <- ggplot() +
geom_point(data=model_deaths, aes(x = date, y = total, colour = interaction )) +
facet_wrap(interaction~., ncol=1)+
scale_colour_manual(values=cc) +
geom_point(data = deaths_covid, aes(x = date, y = actual_deaths), size = 1) +
geom_vline(xintercept = covid_date, colour = "red" ) +
labs(x = "Date", title = "", y = "Number of deaths", colour = "strength of protection") +
lims(x = c(as.Date("2020-02-01"), as.Date("2020-05-31")))  +
theme_linedraw() +
theme(strip.text.y = element_text(angle = 0),
strip.background = element_rect(colour="white", fill="white"),
strip.text = element_text(colour = 'black',hjust = 0))
FIT_PLOT
FIT_PLOT
View(model_deaths)
View(model_deaths$total)
dim(trace_to_sample)
max(introductions$intro_val)
min(introductions$intro_val)
min(transmission$transmission_val)
max(transmission$transmission_val)
################################################################################
# Coronavirus cross-protection
# Author: Naomi R Waterlow
# Date: 2021-04-08
################################################################################
set.seed(19930623)
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
transmission <- data.table()
introductions <- data.table()
ll_values <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
n_samples <- 20
samples_to_take <- sample(x=1:dim(trace_to_sample)[1],size=n_samples,replace = T)
i <- 1
while(i <= n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.001,0.1),
upper = c(0.7,10),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
if(any(is.na(output_list$r_0)) |
any(is.na(output_list$r_eff)) |
any(is.nan(output_list$model_deaths4total))
){
rerun_new_sample <- TRUE
samples_to_take[i] <- samples_to_take[i] +1
print("about to jump")
break}
rerun_new_sample <- FALSE
# store the death output with the output from other samples
temp_ll_values <- data.frame(transmission_fit$value, sample_num, interaction_param)
ll_values <- rbind(ll_values, temp_ll_values)
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
print(sig)
}
if(rerun_new_sample == F){
i <- i + 1
}
print(i)
}
#colours for all
cc <- scales::seq_gradient_pal("darkmagenta",  "darkorange", "Lab")(seq(0,1,length.out=6))
# create the fit plot
model_deaths$sample <- factor(model_deaths$sample)
model_deaths$interaction <- factor(model_deaths$interaction)
model_deaths$interaction <- plyr::revalue(model_deaths$interaction, c("0" = "Cross-protection: 0",
"0.2" = "Cross-protection: 0.2",
"0.4" = "Cross-protection: 0.4",
"0.6" = "Cross-protection: 0.6",
"0.8" = "Cross-protection: 0.8",
"1" = "Cross-protection: 1"))
FIT_PLOT <- ggplot() +
geom_point(data=model_deaths, aes(x = date, y = total, colour = interaction )) +
facet_wrap(interaction~., ncol=1)+
scale_colour_manual(values=cc) +
geom_point(data = deaths_covid, aes(x = date, y = actual_deaths), size = 1) +
geom_vline(xintercept = covid_date, colour = "red" ) +
labs(x = "Date", title = "", y = "Number of deaths", colour = "strength of protection") +
lims(x = c(as.Date("2020-02-01"), as.Date("2020-05-31")))  +
theme_linedraw() +
theme(strip.text.y = element_text(angle = 0),
strip.background = element_rect(colour="white", fill="white"),
strip.text = element_text(colour = 'black',hjust = 0))
FIT_PLOT
which.max(model_deaths$total)
model_deaths[1259]
transmission[1259]
transmission[1259,]
which.max(transmission$transmission_val)
transmission[9,]
max(transmission$transmission_val)
introductions[9,]
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
transmission <- data.table()
introductions <- data.table()
ll_values <- data.table()
################################################################################
# Coronavirus cross-protection
# Author: Naomi R Waterlow
# Date: 2021-04-08
################################################################################
set.seed(19930623)
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
transmission <- data.table()
introductions <- data.table()
ll_values <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
n_samples <- 20
samples_to_take <- sample(x=1:dim(trace_to_sample)[1],size=n_samples,replace = T)
i <- 1
while(i <= n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.001,0.1),
upper = c(0.7,12),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
if(any(is.na(output_list$r_0)) |
any(is.na(output_list$r_eff)) |
any(is.nan(output_list$model_deaths4total))
){
rerun_new_sample <- TRUE
samples_to_take[i] <- samples_to_take[i] +1
print("about to jump")
break}
rerun_new_sample <- FALSE
# store the death output with the output from other samples
temp_ll_values <- data.frame(transmission_fit$value, sample_num, interaction_param)
ll_values <- rbind(ll_values, temp_ll_values)
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
print(sig)
}
if(rerun_new_sample == F){
i <- i + 1
}
print(i)
}
